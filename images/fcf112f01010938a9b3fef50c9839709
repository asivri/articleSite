class Person {
        public string name;
    }
    
    public class Program: MonoBehaviour{
        void Start(){
            
            Person a = new Person();
            a.name = "ali";
            Person b = new Person();
            b.name = "veli";
            Person c = new Person();
            c.name = "ahmet";

	    //Since we just decleared a, b and c as above it will print as:	
            Debug.Log("a's name: " + a.name); // "a's name: ali"
            Debug.Log("b's name: " + b.name); // "b's name: veli"
            Debug.Log("c's name: " + c.name); // "c's name: ahmet"
            
            a=b; // this line decleares "a" as "b". So it'll be printed as below:  
            
            Debug.Log("a's name: " + a.name); // "a's name: veli". Because string "a" refers same as string "b". 
            Debug.Log("b's name: " + b.name); // "b's name: veli". Because it didn't declared as another object which means string "b" is "veli" as declared above.
            Debug.Log("c's name: " + c.name); // "c's name: ahmet". Same as above.
            
            a.name = "hasan"; //this line changes "name" variable for string a. Since it is declared as a=b, string b is also changes as "hasan". So it prints as below:
            
            Debug.Log("a's name: " + a.name); // "a's name: hasan". Because "name" object of "a" assigned as "hasan"
            Debug.Log("b's name: " + b.name); // "b's name: hasan". Because since it assigned same as a one pard belove. 
            Debug.Log("c's name: " + c.name); // "c's name: ahmet". Same as declared above
            
            c=b; // this line changes the object that variable c refers to 
            
            Debug.Log("a's name: " + a.name); // "a's name: hasan"
            Debug.Log("b's name: " + b.name); // "b's name: hasan"
            Debug.Log("c's name: " + c.name); // "c's name: hasan". Because now "c" same as "a" and "b"
    }
}